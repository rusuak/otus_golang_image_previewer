// Code generated by MockGen. DO NOT EDIT.
// Source: resizeproxy.go

// Package resizeproxy is a generated GoMock package.
package resizeproxy

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageGetter is a mock of ImageGetter interface.
type MockImageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockImageGetterMockRecorder
}

// MockImageGetterMockRecorder is the mock recorder for MockImageGetter.
type MockImageGetterMockRecorder struct {
	mock *MockImageGetter
}

// NewMockImageGetter creates a new mock instance.
func NewMockImageGetter(ctrl *gomock.Controller) *MockImageGetter {
	mock := &MockImageGetter{ctrl: ctrl}
	mock.recorder = &MockImageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageGetter) EXPECT() *MockImageGetterMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockImageGetter) GetImage(ctx context.Context, imgRequest ImageRequest) (*ImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imgRequest)
	ret0, _ := ret[0].(*ImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageGetterMockRecorder) GetImage(ctx, imgRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageGetter)(nil).GetImage), ctx, imgRequest)
}

// MockImageResizer is a mock of ImageResizer interface.
type MockImageResizer struct {
	ctrl     *gomock.Controller
	recorder *MockImageResizerMockRecorder
}

// MockImageResizerMockRecorder is the mock recorder for MockImageResizer.
type MockImageResizerMockRecorder struct {
	mock *MockImageResizer
}

// NewMockImageResizer creates a new mock instance.
func NewMockImageResizer(ctrl *gomock.Controller) *MockImageResizer {
	mock := &MockImageResizer{ctrl: ctrl}
	mock.recorder = &MockImageResizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageResizer) EXPECT() *MockImageResizerMockRecorder {
	return m.recorder
}

// ResizeImageCached mocks base method.
func (m *MockImageResizer) ResizeImageCached(ctx context.Context, request *ResizeRequest) (*ResizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeImageCached", ctx, request)
	ret0, _ := ret[0].(*ResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeImageCached indicates an expected call of ResizeImageCached.
func (mr *MockImageResizerMockRecorder) ResizeImageCached(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeImageCached", reflect.TypeOf((*MockImageResizer)(nil).ResizeImageCached), ctx, request)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Set mocks base method.
func (m *MockCache) Set(key string, value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value)
}
